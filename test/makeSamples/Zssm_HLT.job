#!/bin/tcsh
#BSUB -q 2nw
#BSUB -J dy_above400_HLT
##BSUB -J Zssm3000_HLT
#BSUB -R "pool>5000"
#BSUB -o /afs/cern.ch/user/t/tucker/scratch0/dy_above400_HLT_%J.lis
##BSUB -o /afs/cern.ch/user/t/tucker/scratch0/Zssm3000_fm_HLT_%J.lis

echo  --------------------------
echo $0 batch job started at `date`
echo   HLT for CMSSW 1_6_7
echo  --------------------------

setenv CMSSW_VERS CMSSW_1_6_7
setenv WRITE_TO_CASTOR true
setenv NEVENTS -1
#setenv WORKDIR `pwd`

# setenv SAMPLE dy_above200;  setenv FIRSTPU      0
 setenv SAMPLE dy_above400;  setenv FIRSTPU  25000
# setenv SAMPLE dy_above1000; setenv FIRSTPU  50000
# setenv SAMPLE dy_above1500; setenv FIRSTPU  75000
# setenv SAMPLE dy_above2000; setenv FIRSTPU 100000
# setenv SAMPLE dy_above3000; setenv FIRSTPU 125000

# setenv SAMPLE Zssm1000_fm;  setenv FIRSTPU 150000
# setenv SAMPLE Zssm3000_fm;  setenv FIRSTPU 175000
# setenv SAMPLE Zssm5000_fm;  setenv FIRSTPU 200000
# setenv SAMPLE Zpsi1000_fm;  setenv FIRSTPU 225000
# setenv SAMPLE Zpsi3000_fm;  setenv FIRSTPU 250000
# setenv SAMPLE Zpsi5000_fm;  setenv FIRSTPU 275000
# setenv SAMPLE Zeta1000_fm;  setenv FIRSTPU 300000
# setenv SAMPLE Zeta3000_fm;  setenv FIRSTPU 325000
# setenv SAMPLE Zeta5000_fm;  setenv FIRSTPU 350000
# setenv SAMPLE Zchi1000_fm;  setenv FIRSTPU 375000
# setenv SAMPLE Zchi3000_fm;  setenv FIRSTPU 400000
# setenv SAMPLE Zchi5000_fm;  setenv FIRSTPU 420000
# setenv SAMPLE Zlrm1000_fm;  setenv FIRSTPU  10000
# setenv SAMPLE Zlrm3000_fm;  setenv FIRSTPU  35000
# setenv SAMPLE Zlrm5000_fm;  setenv FIRSTPU  60000
# setenv SAMPLE Zalrm1000_fm; setenv FIRSTPU  85000
# setenv SAMPLE Zalrm3000_fm; setenv FIRSTPU 110000
# setenv SAMPLE Zalrm5000_fm; setenv FIRSTPU 135000

# setenv PU PU2x33
# setenv PU PU34

setenv SRCDIR /afs/cern.ch/user/t/tucker/private/${CMSSW_VERS}
setenv OUTDIR /castor/cern.ch/user/t/tucker/${CMSSW_VERS}

echo '**************' $SAMPLE '**************'

cd ${SRCDIR}
eval `scramv1 runtime -csh`
cd ${WORKDIR}

echo '************** HLT **************'
cat > Zssm2mu_HLT.cfg <<EOF
process HLT = {
  untracked PSet maxEvents = {untracked int32 input = ${NEVENTS}}

  include "FWCore/MessageLogger/data/MessageLogger.cfi"

  source = PoolSource {
    untracked vstring fileNames = {'rfio:${OUTDIR}/${SAMPLE}_DIGI_RAW.root'}
#    untracked vstring fileNames = {'file:digiraw.root'}
  }

  include "Configuration/StandardSequences/data/FakeConditions.cff"

  // HLT table to run (set of [HLT] paths)
  include "HLTrigger/Configuration/data/main/HLTtable.cff"
  include "HLTrigger/Configuration/data/common/HLTPrescaleReset.cff"

  # Event output
  include "Configuration/EventContent/data/EventContent.cff"
  
  module hltPoolOutput = PoolOutputModule {
    untracked string fileName = 'hlt.root'
    untracked int32 basketSize = 4096
    using FEVTSIMEventContent
    untracked PSet dataset = {
      untracked string dataTier = "GEN-SIM-DIGI-RECO"
    }
  }

  //Keep  GEN-SIM, MC digis, L1, HLT, RAW
  //Drop digis from raw2digi unpacking within HLT
  replace hltPoolOutput.outputCommands += "drop *_*Digis_*_HLT"

  endpath outpath = {hltPoolOutput}
}
EOF
#cmsRun Zssm2mu_HLT.cfg >& ${LOGFILE}
cmsRun Zssm2mu_HLT.cfg

if ($? != 0) then
  echo ' CMSSW (Zssm2mu_HLT) exited with error code'
  exit 1
endif
ls

if (${WRITE_TO_CASTOR} == true) then
  rfcp hlt.root ${OUTDIR}/${SAMPLE}_HLT.root
  rfdir ${OUTDIR}
endif

echo
echo  --------------------------
echo   $0 finished at `date`
echo  --------------------------
