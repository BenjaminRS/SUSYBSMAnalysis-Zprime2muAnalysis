include "SUSYBSMAnalysis/Zprime2muAnalysis/data/Zprime2muAnalysisCommon.cff"

module Zprime2muAsymmetry = Zprime2muAsymmetry {
  using Zprime2muAnalysisCommon

  // verbosity controls the amount of debug information dumped
  // see the VERBOSITY enum in Zprime2muAsymmetry.h for levels
  untracked int32 verbosity = 1 // = VERBOSITY_SIMPLE
  // if noFit is true, only make the histograms -- useful for getting
  // the recSigma information for above
  bool noFit = false
  // if onlyEvalLLR is true, only evaluate the log-likelihood ratio
  // useful in spin discrimination studies
  bool onlyEvalLLR = false
  // fitType determines the form of the cos_cs pdf used in the fits
  // it is a magic number here, but is defined in the FITTYPE enum
  // in Zprime2muAsymmetry.h
  int32 fitType = 0
  // only do so many of the fits (up to 6; from gen+gen to rec+rec)
  int32 numFits = 6
  // max number of events to read from the parameterization sample
  int32 maxParamEvents = -1
  // whether to use the cached parameterization
  bool useCachedParams = false
  // the name of the root file that holds the cached parameters
  string paramCacheFile = "cached.root"
  // whether only to calculate the parameterization
  bool calcParamsOnly = false
  // whether to use the on-peak fit window or the off-peak one
  bool onPeak = true
  // whether bremsstrahlung was turned on for the generated events
  bool internalBremOn = true
  // whether to fix b for the simple 1-D fits
  bool fixbIn1DFit = false
  // whether to use cos_true in 2/6-D fits
  bool useCosTrueInFit = false
  // whether to correct the cos_cs values using MC truth
  bool artificialCosCS = false
  // whether to use the probabilistic mistag correction
  bool correctMistags = true
  // whether to use the calculation of the mistag prob instead of
  // the parameterization
  bool calculateMistag = true

  include "SUSYBSMAnalysis/Zprime2muAnalysis/data/AsymmetryDataSets.cff"
  
  string dataSet = "Zssm1000"
}
